//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `DrawViewController`, and contains static references to 3 segues.
    struct drawViewController {
      /// Segue identifier `CreditsSegue`.
      static let creditsSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawViewController, CreditsTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CreditsSegue")
      /// Segue identifier `SpectrogramSegue`.
      static let spectrogramSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawViewController, SpectrogramViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SpectrogramSegue")
      /// Segue identifier `StartSegue`.
      static let startSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrawViewController, StartViewController> = Rswift.StoryboardSegueIdentifier(identifier: "StartSegue")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `CreditsSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func creditsSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawViewController, CreditsTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawViewController.creditsSegue, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `SpectrogramSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spectrogramSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawViewController, SpectrogramViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawViewController.spectrogramSegue, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `StartSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func startSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrawViewController, StartViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drawViewController.startSegue, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `StartViewController`, and contains static references to 2 segues.
    struct startViewController {
      /// Segue identifier `DrawSegue`.
      static let drawSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, StartViewController, DrawViewController> = Rswift.StoryboardSegueIdentifier(identifier: "DrawSegue")
      /// Segue identifier `SpectrogramSegue`.
      static let spectrogramSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, StartViewController, SpectrogramViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SpectrogramSegue")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `DrawSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func drawSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, StartViewController, DrawViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.startViewController.drawSegue, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `SpectrogramSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func spectrogramSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, StartViewController, SpectrogramViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.startViewController.spectrogramSegue, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 30 files.
  struct file {
    /// Resource file `Pattern-Poem-Maze.jpg`.
    static let patternPoemMazeJpg = Rswift.FileResource(bundle: R.hostingBundle, name: "Pattern-Poem-Maze", pathExtension: "jpg")
    /// Resource file `Visual_1.png`.
    static let visual_1Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_1", pathExtension: "png")
    /// Resource file `Visual_10.png`.
    static let visual_10Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_10", pathExtension: "png")
    /// Resource file `Visual_11.png`.
    static let visual_11Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_11", pathExtension: "png")
    /// Resource file `Visual_12.png`.
    static let visual_12Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_12", pathExtension: "png")
    /// Resource file `Visual_13.png`.
    static let visual_13Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_13", pathExtension: "png")
    /// Resource file `Visual_14.png`.
    static let visual_14Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_14", pathExtension: "png")
    /// Resource file `Visual_2.png`.
    static let visual_2Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_2", pathExtension: "png")
    /// Resource file `Visual_3.png`.
    static let visual_3Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_3", pathExtension: "png")
    /// Resource file `Visual_4.png`.
    static let visual_4Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_4", pathExtension: "png")
    /// Resource file `Visual_5.png`.
    static let visual_5Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_5", pathExtension: "png")
    /// Resource file `Visual_7.png`.
    static let visual_7Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_7", pathExtension: "png")
    /// Resource file `Visual_8.png`.
    static let visual_8Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_8", pathExtension: "png")
    /// Resource file `Visual_9.png`.
    static let visual_9Png = Rswift.FileResource(bundle: R.hostingBundle, name: "Visual_9", pathExtension: "png")
    /// Resource file `divina_commedia.json`.
    static let divina_commediaJson = Rswift.FileResource(bundle: R.hostingBundle, name: "divina_commedia", pathExtension: "json")
    /// Resource file `page-1.txt`.
    static let page1Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-1", pathExtension: "txt")
    /// Resource file `page-10.txt`.
    static let page10Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-10", pathExtension: "txt")
    /// Resource file `page-11.txt`.
    static let page11Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-11", pathExtension: "txt")
    /// Resource file `page-12.txt`.
    static let page12Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-12", pathExtension: "txt")
    /// Resource file `page-13.txt`.
    static let page13Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-13", pathExtension: "txt")
    /// Resource file `page-14.txt`.
    static let page14Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-14", pathExtension: "txt")
    /// Resource file `page-15.txt`.
    static let page15Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-15", pathExtension: "txt")
    /// Resource file `page-2.txt`.
    static let page2Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-2", pathExtension: "txt")
    /// Resource file `page-3.txt`.
    static let page3Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-3", pathExtension: "txt")
    /// Resource file `page-4.txt`.
    static let page4Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-4", pathExtension: "txt")
    /// Resource file `page-5.txt`.
    static let page5Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-5", pathExtension: "txt")
    /// Resource file `page-6.txt`.
    static let page6Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-6", pathExtension: "txt")
    /// Resource file `page-7.txt`.
    static let page7Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-7", pathExtension: "txt")
    /// Resource file `page-8.txt`.
    static let page8Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-8", pathExtension: "txt")
    /// Resource file `page-9.txt`.
    static let page9Txt = Rswift.FileResource(bundle: R.hostingBundle, name: "page-9", pathExtension: "txt")

    /// `bundle.url(forResource: "Pattern-Poem-Maze", withExtension: "jpg")`
    static func patternPoemMazeJpg(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.patternPoemMazeJpg
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_1", withExtension: "png")`
    static func visual_1Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_1Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_10", withExtension: "png")`
    static func visual_10Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_10Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_11", withExtension: "png")`
    static func visual_11Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_11Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_12", withExtension: "png")`
    static func visual_12Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_12Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_13", withExtension: "png")`
    static func visual_13Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_13Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_14", withExtension: "png")`
    static func visual_14Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_14Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_2", withExtension: "png")`
    static func visual_2Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_2Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_3", withExtension: "png")`
    static func visual_3Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_3Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_4", withExtension: "png")`
    static func visual_4Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_4Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_5", withExtension: "png")`
    static func visual_5Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_5Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_7", withExtension: "png")`
    static func visual_7Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_7Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_8", withExtension: "png")`
    static func visual_8Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_8Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Visual_9", withExtension: "png")`
    static func visual_9Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.visual_9Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "divina_commedia", withExtension: "json")`
    static func divina_commediaJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.divina_commediaJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-1", withExtension: "txt")`
    static func page1Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page1Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-10", withExtension: "txt")`
    static func page10Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page10Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-11", withExtension: "txt")`
    static func page11Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page11Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-12", withExtension: "txt")`
    static func page12Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page12Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-13", withExtension: "txt")`
    static func page13Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page13Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-14", withExtension: "txt")`
    static func page14Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page14Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-15", withExtension: "txt")`
    static func page15Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page15Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-2", withExtension: "txt")`
    static func page2Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page2Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-3", withExtension: "txt")`
    static func page3Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page3Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-4", withExtension: "txt")`
    static func page4Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page4Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-5", withExtension: "txt")`
    static func page5Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page5Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-6", withExtension: "txt")`
    static func page6Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page6Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-7", withExtension: "txt")`
    static func page7Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page7Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-8", withExtension: "txt")`
    static func page8Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page8Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "page-9", withExtension: "txt")`
    static func page9Txt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.page9Txt
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 18 images.
  struct image {
    /// Image `Pattern-Poem-Maze.jpg`.
    static let patternPoemMazeJpg = Rswift.ImageResource(bundle: R.hostingBundle, name: "Pattern-Poem-Maze.jpg")
    /// Image `Visual_10`.
    static let visual_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_10")
    /// Image `Visual_11`.
    static let visual_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_11")
    /// Image `Visual_12`.
    static let visual_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_12")
    /// Image `Visual_13`.
    static let visual_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_13")
    /// Image `Visual_14`.
    static let visual_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_14")
    /// Image `Visual_1`.
    static let visual_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_1")
    /// Image `Visual_2`.
    static let visual_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_2")
    /// Image `Visual_3`.
    static let visual_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_3")
    /// Image `Visual_4`.
    static let visual_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_4")
    /// Image `Visual_5`.
    static let visual_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_5")
    /// Image `Visual_7`.
    static let visual_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_7")
    /// Image `Visual_8`.
    static let visual_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_8")
    /// Image `Visual_9`.
    static let visual_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visual_9")
    /// Image `air`.
    static let air = Rswift.ImageResource(bundle: R.hostingBundle, name: "air")
    /// Image `gesture`.
    static let gesture = Rswift.ImageResource(bundle: R.hostingBundle, name: "gesture")
    /// Image `launch`.
    static let launch = Rswift.ImageResource(bundle: R.hostingBundle, name: "launch")
    /// Image `stop`.
    static let stop = Rswift.ImageResource(bundle: R.hostingBundle, name: "stop")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Pattern-Poem-Maze.jpg", bundle: ..., traitCollection: ...)`
    static func patternPoemMazeJpg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.patternPoemMazeJpg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_1", bundle: ..., traitCollection: ...)`
    static func visual_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_10", bundle: ..., traitCollection: ...)`
    static func visual_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_11", bundle: ..., traitCollection: ...)`
    static func visual_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_12", bundle: ..., traitCollection: ...)`
    static func visual_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_13", bundle: ..., traitCollection: ...)`
    static func visual_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_14", bundle: ..., traitCollection: ...)`
    static func visual_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_2", bundle: ..., traitCollection: ...)`
    static func visual_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_3", bundle: ..., traitCollection: ...)`
    static func visual_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_4", bundle: ..., traitCollection: ...)`
    static func visual_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_5", bundle: ..., traitCollection: ...)`
    static func visual_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_7", bundle: ..., traitCollection: ...)`
    static func visual_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_8", bundle: ..., traitCollection: ...)`
    static func visual_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visual_9", bundle: ..., traitCollection: ...)`
    static func visual_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visual_9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "air", bundle: ..., traitCollection: ...)`
    static func air(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.air, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gesture", bundle: ..., traitCollection: ...)`
    static func gesture(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gesture, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "launch", bundle: ..., traitCollection: ...)`
    static func launch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "stop", bundle: ..., traitCollection: ...)`
    static func stop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stop, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// en translation: ${PRODUCT_NAME} needs to record your breath!
      ///
      /// Locales: en, it
      static let nsMicrophoneUsageDescription = Rswift.StringResource(key: "NSMicrophoneUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)

      /// en translation: ${PRODUCT_NAME} needs to record your breath!
      ///
      /// Locales: en, it
      static func nsMicrophoneUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSMicrophoneUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSMicrophoneUsageDescription"
        }

        return NSLocalizedString("NSMicrophoneUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: App requires microphone access.
      ///
      /// Locales: en, it
      static let requiresMicrophoneAccess = Rswift.StringResource(key: "requiresMicrophoneAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Can't create microphone.
      ///
      /// Locales: en, it
      static let cantCreateMicrophone = Rswift.StringResource(key: "cantCreateMicrophone", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Generic error
      ///
      /// Locales: en, it
      static let errorTitle = Rswift.StringResource(key: "errorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: No connection
      ///
      /// Locales: en, it
      static let noConnectionErrorTitle = Rswift.StringResource(key: "noConnectionErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Please check your internet connection and retry.
      ///
      /// Locales: en, it
      static let noConnectionErrorMessage = Rswift.StringResource(key: "noConnectionErrorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)
      /// en translation: Something went wrong: 
      ///
      /// Locales: en, it
      static let errorMessage = Rswift.StringResource(key: "errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it"], comment: nil)

      /// en translation: App requires microphone access.
      ///
      /// Locales: en, it
      static func requiresMicrophoneAccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("requiresMicrophoneAccess", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "requiresMicrophoneAccess"
        }

        return NSLocalizedString("requiresMicrophoneAccess", bundle: bundle, comment: "")
      }

      /// en translation: Can't create microphone.
      ///
      /// Locales: en, it
      static func cantCreateMicrophone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cantCreateMicrophone", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cantCreateMicrophone"
        }

        return NSLocalizedString("cantCreateMicrophone", bundle: bundle, comment: "")
      }

      /// en translation: Generic error
      ///
      /// Locales: en, it
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTitle"
        }

        return NSLocalizedString("errorTitle", bundle: bundle, comment: "")
      }

      /// en translation: No connection
      ///
      /// Locales: en, it
      static func noConnectionErrorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noConnectionErrorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noConnectionErrorTitle"
        }

        return NSLocalizedString("noConnectionErrorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Please check your internet connection and retry.
      ///
      /// Locales: en, it
      static func noConnectionErrorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("noConnectionErrorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "noConnectionErrorMessage"
        }

        return NSLocalizedString("noConnectionErrorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Something went wrong: 
      ///
      /// Locales: en, it
      static func errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorMessage"
        }

        return NSLocalizedString("errorMessage", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 16 localization keys.
    struct main {
      /// it translation: D
      ///
      /// Locales: it
      static let xfq0AvVConfigurationTitle = Rswift.StringResource(key: "9XF-q0-AvV.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: D
      ///
      /// Locales: it
      static let xfq0AvVNormalTitle = Rswift.StringResource(key: "9XF-q0-AvV.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Di_Segna
      ///
      /// Locales: it
      static let vuCV39SZHeaderTitle = Rswift.StringResource(key: "vuC-V3-9SZ.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: L'autore vuole ringraziare gli amici che  mi hanno aiutato in questo percorso, Katherine in particolare e Elia. Senza il loro supporto e i loro consigli questa app non sarebbe venuta così compiuta.
      ///
      /// Locales: it
      static let ixq25SwmText = Rswift.StringResource(key: "ixq-25-Swm.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: P
      ///
      /// Locales: it
      static let zjbWZSJRConfigurationTitle = Rswift.StringResource(key: "zjb-WZ-SJR.configuration.title", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: P
      ///
      /// Locales: it
      static let zjbWZSJRNormalTitle = Rswift.StringResource(key: "zjb-WZ-SJR.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Per poter creare quest'app, l'auotore ha sfruttato:
      ///
      /// Locales: it
      static let ghN1eXesText = Rswift.StringResource(key: "GhN-1e-Xes.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Ringraziamenti
      ///
      /// Locales: it
      static let dh0BL06PHeaderTitle = Rswift.StringResource(key: "Dh0-bL-06P.headerTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Ringrazio Alice Bertolasi perchè ha creato il terreno per poter iniziare questo percorso.
      ///
      /// Locales: it
      static let xVcE8E5xText = Rswift.StringResource(key: "xVc-e8-E5x.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Subtitle
      ///
      /// Locales: it
      static let nNsZpRbQText = Rswift.StringResource(key: "NNs-zp-RbQ.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: Title
      ///
      /// Locales: it
      static let dxHjUibText = Rswift.StringResource(key: "4dx-Hj-uib.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: http://www.intratext.com/ixt/ita0191/ per le statische sulla Divina Commedia
      ///
      /// Locales: it
      static let n79GNQaRText = Rswift.StringResource(key: "n79-gN-QaR.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: https://github.com/Bersaelor/KDTree per poter creare i grafi per il Paradiso
      ///
      /// Locales: it
      static let ge1AOT8TText = Rswift.StringResource(key: "GE1-aO-t8T.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: https://github.com/fabiovalse/Divina-Commedia-Visualization per il testo della Divina Commedia in formato json
      ///
      /// Locales: it
      static let n6HA5BgxText = Rswift.StringResource(key: "n6H-a5-bgx.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: https://github.com/mac-cain13/R.swift per poter maneggiare più semplicemente gli assets
      ///
      /// Locales: it
      static let cE4YCK3Text = Rswift.StringResource(key: "4cE-4Y-cK3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)
      /// it translation: https://github.com/scinfu/SwiftSoup per poter estrarre i dati dall'html
      ///
      /// Locales: it
      static let u5qGS6MOText = Rswift.StringResource(key: "u5q-GS-6MO.text", tableName: "Main", bundle: R.hostingBundle, locales: ["it"], comment: nil)

      /// it translation: D
      ///
      /// Locales: it
      static func xfq0AvVConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9XF-q0-AvV.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9XF-q0-AvV.configuration.title"
        }

        return NSLocalizedString("9XF-q0-AvV.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: D
      ///
      /// Locales: it
      static func xfq0AvVNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9XF-q0-AvV.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9XF-q0-AvV.normalTitle"
        }

        return NSLocalizedString("9XF-q0-AvV.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: Di_Segna
      ///
      /// Locales: it
      static func vuCV39SZHeaderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("vuC-V3-9SZ.headerTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "vuC-V3-9SZ.headerTitle"
        }

        return NSLocalizedString("vuC-V3-9SZ.headerTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: L'autore vuole ringraziare gli amici che  mi hanno aiutato in questo percorso, Katherine in particolare e Elia. Senza il loro supporto e i loro consigli questa app non sarebbe venuta così compiuta.
      ///
      /// Locales: it
      static func ixq25SwmText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ixq-25-Swm.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "ixq-25-Swm.text"
        }

        return NSLocalizedString("ixq-25-Swm.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: P
      ///
      /// Locales: it
      static func zjbWZSJRConfigurationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zjb-WZ-SJR.configuration.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zjb-WZ-SJR.configuration.title"
        }

        return NSLocalizedString("zjb-WZ-SJR.configuration.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: P
      ///
      /// Locales: it
      static func zjbWZSJRNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zjb-WZ-SJR.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "zjb-WZ-SJR.normalTitle"
        }

        return NSLocalizedString("zjb-WZ-SJR.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: Per poter creare quest'app, l'auotore ha sfruttato:
      ///
      /// Locales: it
      static func ghN1eXesText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GhN-1e-Xes.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GhN-1e-Xes.text"
        }

        return NSLocalizedString("GhN-1e-Xes.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: Ringraziamenti
      ///
      /// Locales: it
      static func dh0BL06PHeaderTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dh0-bL-06P.headerTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Dh0-bL-06P.headerTitle"
        }

        return NSLocalizedString("Dh0-bL-06P.headerTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: Ringrazio Alice Bertolasi perchè ha creato il terreno per poter iniziare questo percorso.
      ///
      /// Locales: it
      static func xVcE8E5xText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("xVc-e8-E5x.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "xVc-e8-E5x.text"
        }

        return NSLocalizedString("xVc-e8-E5x.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: Subtitle
      ///
      /// Locales: it
      static func nNsZpRbQText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NNs-zp-RbQ.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "NNs-zp-RbQ.text"
        }

        return NSLocalizedString("NNs-zp-RbQ.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: Title
      ///
      /// Locales: it
      static func dxHjUibText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4dx-Hj-uib.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4dx-Hj-uib.text"
        }

        return NSLocalizedString("4dx-Hj-uib.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: http://www.intratext.com/ixt/ita0191/ per le statische sulla Divina Commedia
      ///
      /// Locales: it
      static func n79GNQaRText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n79-gN-QaR.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "n79-gN-QaR.text"
        }

        return NSLocalizedString("n79-gN-QaR.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: https://github.com/Bersaelor/KDTree per poter creare i grafi per il Paradiso
      ///
      /// Locales: it
      static func ge1AOT8TText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("GE1-aO-t8T.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "GE1-aO-t8T.text"
        }

        return NSLocalizedString("GE1-aO-t8T.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: https://github.com/fabiovalse/Divina-Commedia-Visualization per il testo della Divina Commedia in formato json
      ///
      /// Locales: it
      static func n6HA5BgxText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("n6H-a5-bgx.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "n6H-a5-bgx.text"
        }

        return NSLocalizedString("n6H-a5-bgx.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: https://github.com/mac-cain13/R.swift per poter maneggiare più semplicemente gli assets
      ///
      /// Locales: it
      static func cE4YCK3Text(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("4cE-4Y-cK3.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "4cE-4Y-cK3.text"
        }

        return NSLocalizedString("4cE-4Y-cK3.text", tableName: "Main", bundle: bundle, comment: "")
      }

      /// it translation: https://github.com/scinfu/SwiftSoup per poter estrarre i dati dall'html
      ///
      /// Locales: it
      static func u5qGS6MOText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("u5q-GS-6MO.text", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "u5q-GS-6MO.text"
        }

        return NSLocalizedString("u5q-GS-6MO.text", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "launch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'launch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = StartViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if UIKit.UIImage(named: "air", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'air' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "gesture", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gesture' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "stop", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'stop' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "xmark") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'xmark' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
